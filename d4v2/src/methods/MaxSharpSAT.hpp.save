/*
 * d4
 * Copyright (C) 2020  Univ. Artois & CNRS
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
#pragma once

#include <bits/stdint-uintn.h>
#include <boost/program_options.hpp>
#include <ctime>
#include <iomanip>
#include <iostream>
#include <sys/types.h>

#include "src/caching/Cache.hpp"
#include "src/caching/CachedBucket.hpp"
#include "src/caching/TmpEntry.hpp"
#include "src/heuristics/PartitioningHeuristic.hpp"
#include "src/heuristics/PhaseHeuristic.hpp"
#include "src/heuristics/ScoringMethod.hpp"
#include "src/methods/nnf/Node.hpp"
#include "src/preprocs/PreprocManager.hpp"
#include "src/problem/ProblemManager.hpp"
#include "src/problem/ProblemTypes.hpp"
#include "src/solvers/WrapperSolver.hpp"
#include "src/specs/SpecManager.hpp"
#include "src/utils/MemoryStat.hpp"

#include "Counter.hpp"
#include "DataBranch.hpp"
#include "MethodManager.hpp"

namespace d4 {
namespace po = boost::program_options;
template <class T> class Counter;

template <class T> class MaxSharpSAT : public MethodManager {
  enum TypeDecision { NO_DEC, EXIST_DEC, MAX_DEC };

  struct MaxSharpSatResult {
    T count;
    u_int8_t *valuation;

    MaxSharpSatResult() : count(T(0)), valuation(NULL) {}
    MaxSharpSatResult(const T c, u_int8_t *v) : count(c), valuation(v) {}
  };

private:
  const unsigned NB_SEP = 157;

  bool optDomConst;
  bool optReversePolarity;

  unsigned m_nbCallCall;
  unsigned m_nbCallProj;
  unsigned m_nbSplit;
  unsigned m_nbDecisionNode;
  unsigned m_optCached;
  unsigned m_stampIdx;

  unsigned m_countMaxCut;
  unsigned m_countIndCut;
  bool m_cutActivatedMax;
  bool m_cutActivatedProj;
  bool m_greedyInitActivated;

  std::vector<unsigned> m_stampVar;
  std::vector<std::vector<Lit>> clauses;

  std::vector<bool> m_isDecisionVarible;
  std::vector<bool> m_isProjectedVariable;
  std::vector<bool> m_isMaxDecisionVariable;
  std::vector<unsigned> m_redirectionPos;
  T m_maxCount = T(0);

  const unsigned c_sizePage = 1 << 18;
  std::vector<u_int8_t *> m_memoryPages;
  unsigned m_posInMemoryPages;
  unsigned m_sizeArray;

  ProblemManager *m_problem;
  WrapperSolver *m_solver;
  SpecManager *m_specs;
  ScoringMethod *m_hVar;
  PhaseHeuristic *m_hPhase;

  Cache<T> *m_cacheInd;
  Cache<MaxSharpSatResult> *m_cacheMax;

  std::ostream m_out;
  bool m_panicMode;

public:
  /**
     Constructor.

     @param[in] vm, the list of options.
   */
  MaxSharpSAT(po::variables_map &vm, std::string &meth, bool isFloat,
              ProblemManager *initProblem, std::ostream &out,
              LastBreathPreproc &lastBreath)
      : m_problem(initProblem), m_out(nullptr) {
    // init the output stream
    m_out.copyfmt(out);
    m_out.clear(out.rdstate());
    m_out.basic_ios<char>::rdbuf(out.rdbuf());

    // we create the SAT solver.
    m_solver = WrapperSolver::makeWrapperSolver(vm, m_out);
    assert(m_solver);
    m_panicMode = lastBreath.panic;
    m_solver->initSolver(*m_problem);
    m_solver->setCountConflict(lastBreath.countConflict, 1,
                               m_problem->getNbVar());
    m_solver->setNeedModel(true);

    // we initialize the object that will give info about the problem.
    m_specs = SpecManager::makeSpecManager(vm, *m_problem, m_out);
    assert(m_specs);

    // we initialize the object used to compute score and partition.
    m_hVar = ScoringMethod::makeScoringMethod(vm, *m_specs, *m_solver, m_out);
    m_hPhase =
        PhaseHeuristic::makePhaseHeuristic(vm, *m_specs, *m_solver, m_out);

    // specify which variables are decisions, and which are not.
    m_redirectionPos.clear();
    m_isDecisionVarible.clear();
    m_isMaxDecisionVariable.clear();
    m_isProjectedVariable.clear();

    m_redirectionPos.resize(m_problem->getNbVar() + 1, 0);
    m_isDecisionVarible.resize(m_problem->getNbVar() + 1, false);
    m_isProjectedVariable.resize(m_problem->getNbVar() + 1, false);
    for (unsigned i = 0; i < m_problem->getIndVar().size(); i++) {
      Var v = m_problem->getIndVar()[i];
      m_isDecisionVarible[v] = true;
      m_redirectionPos[v] = i;
      m_isProjectedVariable[v] = true;
    }

    m_isMaxDecisionVariable.resize(m_problem->getNbVar() + 1, false);
    for (unsigned i = 0; i < m_problem->getMaxVar().size(); i++) {
      Var v = m_problem->getMaxVar()[i];
      m_isMaxDecisionVariable[v] = true;
      m_redirectionPos[v] = i;
    }

    // no partitioning heuristic for the moment.
    assert(m_hVar && m_hPhase);
    m_cacheInd = new Cache<T>(vm, m_problem->getNbVar(), m_specs, m_out);
    m_cacheMax =
        new Cache<MaxSharpSatResult>(vm, m_problem->getNbVar(), m_specs, m_out);

    // init the clock time.
    initTimer();

    m_cutActivatedMax = vm["maxsharpsat-option-cut-max"].as<bool>();
    m_cutActivatedProj = vm["maxsharpsat-option-cut-ind"].as<bool>();
    m_greedyInitActivated = vm["maxsharpsat-option-greedy-init"].as<bool>();
    m_out << "c [MAX#SAT] Cut on max part: " << m_cutActivatedMax << "\n";
    m_out << "c [MAX#SAT] Cut on ind part: " << m_cutActivatedProj << "\n";
    m_out << "c [MAX#SAT] Greedy init activated: " << m_greedyInitActivated
          << "\n";

    m_optCached = vm["cache-activated"].as<bool>();
    m_nbCallProj = m_nbDecisionNode = m_nbSplit = m_nbCallCall = 0;
    m_countIndCut = m_countMaxCut = 0;

    m_stampIdx = 0;
    m_stampVar.resize(m_specs->getNbVariable() + 1, 0);
    m_out << "c\n";

    // init the memory requierd for storing interpretation.
    m_memoryPages.push_back(new u_int8_t[c_sizePage]);
    m_posInMemoryPages = 0;
    m_sizeArray = m_problem->getMaxVar().size();
  } // constructor

  /**
     Destructor.
   */
  ~MaxSharpSAT() {
    delete m_problem;
    delete m_solver;
    delete m_specs;
    delete m_hVar;
    delete m_hPhase;
    delete m_cacheInd;
    delete m_cacheMax;

    for (auto page : m_memoryPages)
      delete[] page;
  } // destructor

private:
  /**
     Print out information about the solving process.

     @param[in] out, the stream we use to print out information.
  */
  inline void showInter(std::ostream &out) {
    out << "c "
        << "|" << std::setw(WIDTH_PRINT_COLUMN_MC) << m_nbCallCall << std::fixed
        << "|" << std::setw(WIDTH_PRINT_COLUMN_MC) << m_nbCallProj << std::fixed
        << std::setprecision(2) << "|" << std::setw(WIDTH_PRINT_COLUMN_MC)
        << getTimer() << "|" << std::setw(WIDTH_PRINT_COLUMN_MC)
        << m_cacheInd->getNbPositiveHit() << "|"
        << std::setw(WIDTH_PRINT_COLUMN_MC) << m_cacheInd->getNbNegativeHit()
        << "|" << std::setw(WIDTH_PRINT_COLUMN_MC) << m_cacheInd->usedMemory()
        << "|" << std::setw(WIDTH_PRINT_COLUMN_MC) << m_nbSplit << "|"
        << std::setw(WIDTH_PRINT_COLUMN_MC) << MemoryStat::memUsedPeak() << "|"
        << std::setw(WIDTH_PRINT_COLUMN_MC) << m_nbDecisionNode << "|"
        << std::setw(WIDTH_PRINT_COLUMN_MC) << m_maxCount << "|"
        << std::setw(WIDTH_PRINT_COLUMN_MC) << m_countMaxCut << "|"
        << std::setw(WIDTH_PRINT_COLUMN_MC) << m_countIndCut << "|\n";
  } // showInter

  /**
     Print out a line of dashes.

     @param[in] out, the stream we use to print out information.
   */
  inline void separator(std::ostream &out) {
    out << "c ";
    for (int i = 0; i < NB_SEP; i++)
      out << "-";
    out << "\n";
  } // separator

  /**
     Print out the header information.

     @param[in] out, the stream we use to print out information.
  */
  inline void showHeader(std::ostream &out) {
    separator(out);
    out << "c "
        << "|" << std::setw(WIDTH_PRINT_COLUMN_MC) << "#call(m)"
        << "|" << std::setw(WIDTH_PRINT_COLUMN_MC) << "#call(p)"
        << "|" << std::setw(WIDTH_PRINT_COLUMN_MC) << "time"
        << "|" << std::setw(WIDTH_PRINT_COLUMN_MC) << "#posHit"
        << "|" << std::setw(WIDTH_PRINT_COLUMN_MC) << "#negHit"
        << "|" << std::setw(WIDTH_PRINT_COLUMN_MC) << "memory"
        << "|" << std::setw(WIDTH_PRINT_COLUMN_MC) << "#split"
        << "|" << std::setw(WIDTH_PRINT_COLUMN_MC) << "mem(MB)"
        << "|" << std::setw(WIDTH_PRINT_COLUMN_MC) << "#dec. Node"
        << "|" << std::setw(WIDTH_PRINT_COLUMN_MC) << "max#count"
        << "|" << std::setw(WIDTH_PRINT_COLUMN_MC) << "#cut on max"
        << "|" << std::setw(WIDTH_PRINT_COLUMN_MC) << "#cut on ind"
        << "|\n";
    separator(out);
  } // showHeader

  /**
     Print out information when it is requiered.

     @param[in] out, the stream we use to print out information.
   */
  inline void showRun(std::ostream &out) {
    unsigned nbCall = m_nbCallCall + m_nbCallProj;
    if (!(nbCall & (MASK_HEADER)))
      showHeader(out);
    if (nbCall && !(nbCall & MASK_SHOWRUN_MC))
      showInter(out);
  } // showRun

  /**
     Print out the final stat.

     @param[in] out, the stream we use to print out information.
   */
  inline void printFinalStats(std::ostream &out) {
    separator(out);
    out << "c\n";
    out << "c \033[1m\033[31mStatistics \033[0m\n";
    out << "c \033[33mCompilation Information\033[0m\n";
    out << "c Number of recursive call: " << m_nbCallCall << "\n";
    out << "c Number of split formula: " << m_nbSplit << "\n";
    out << "c Number of decision: " << m_nbDecisionNode << "\n";
    out << "c Number of cut on the max part: " << m_countMaxCut << "\n";
    out << "c Number of cut on the ind part: " << m_countIndCut << "\n";
    out << "c\n";
    m_cacheInd->printCacheInformation(out);
    out << "c\n";
    m_cacheMax->printCacheInformation(out);
    out << "c Final time: " << getTimer() << "\n";
    out << "c\n";
  } // printFinalStat

  /**
   * @brief Get a pointer on an allocated array of size m_sizeArray (which is
   * set once in the constructor).
   *
   * @return a pointer on a u_int8_t array.
   */
  u_int8_t *getArray() {
    u_int8_t *ret = &(m_memoryPages.back()[m_posInMemoryPages]);
    m_posInMemoryPages += m_sizeArray;
    if (m_posInMemoryPages > c_sizePage) {
      m_memoryPages.push_back(new u_int8_t[c_sizePage]);
      m_posInMemoryPages = 0;
      ret = m_memoryPages.back();
    }
    return ret;
  } // getArray

  /**
   * Expel from a set of variables the ones they are marked as being decidable.
   * @param[out] vars, the set of variables we search to filter.
   * @param[in] isDecisionvariable, a type decision vector that marks as true
   * decision variables.
   */
  void expelNoDecisionVar(std::vector<Var> &vars,
                          std::vector<bool> &isDecisionVariable) {
    unsigned j = 0;
    for (unsigned i = 0; i < vars.size(); i++)
      if (isDecisionVariable[vars[i]])
        vars[j++] = vars[i];
    vars.resize(j);
  } // expelNoDecisionVar

  /**
   * Expel from a set of variables the ones they are marked as being decidable.
   * @param[out] vars, the set of variables we search to filter.
   * @param[in] isDecisionvariable, a type decision vector that marks as true
   * decision variables.
   */
  void expelNoDecisionLit(std::vector<Lit> &lits,
                          std::vector<bool> &isDecisionVariable) {
    unsigned j = 0;
    for (unsigned i = 0; i < lits.size(); i++)
      if (isDecisionVariable[lits[i].var()])
        lits[j++] = lits[i];
    lits.resize(j);
  } // expelNoDecisionLit

  /**
   * @brief Estimate the maximum number of models we can get when considering
   * the given set of variables.
   *
   * @param setOfVar is the considered set of variables.
   * @return T is the resulting number of models (upper bound).
   */
  T computeUpper(std::vector<Var> &setOfVar) {
    T ret = 1;
    for (auto v : setOfVar)
      if (m_isProjectedVariable[v])
        ret = ret * 2;
    return ret;
  } // computeUpper

  /**
   * @brief Apply an or logic between resValuation and orValuation (the result
   * is stroed in resValuation).
   *
   * @param vars is the set of variables we are considering for the OR.
   * @param[out] resValuation is a 'boolean' vector that also receive the
   * result.
   * @param orValuation is another 'boolean' vector used for the OR
   */
  void orOnMaxVar(std::vector<Var> &vars, u_int8_t *resValuation,
                  u_int8_t *orValuation) {
    for (auto v : vars) {
      if (m_isMaxDecisionVariable[v])
        resValuation[m_redirectionPos[v]] |= orValuation[m_redirectionPos[v]];
    }
  } // disjunctionOnMaxVariable

  /**
   * @brief Search for a valuation of the max variables that maximizes the
   * number of models on the remaning formula where some variables are
   * forget.
   *
   * @param setOfVar, the current set of considered variables.
   * @param unitsLit, the set of unit literal detected at this level.
   * @param freeVariable, the variables which become free decision node.
   * @param out, the stream we use to print out logs.
   * @param result, the strucre where is solved the result.
   * @param lower, the min we do not want to get by considering this
   * subproblem.
   * @param upper, the max we can possible get by considering this
   * subproblem.
   * @return true if we do not cut the process, false otherwise.
   */
  bool searchMaxValuation(std::vector<Var> &setOfVar,
                          std::vector<Lit> &unitsLit,
                          std::vector<Var> &freeVariable, std::ostream &out,
                          MaxSharpSatResult &result, T &lower) {
    showRun(out);
    m_nbCallCall++;

    // is the problem still satisifiable?
    if (!m_solver->solve(setOfVar)) {
      result.count = T(0);
      result.valuation = NULL;
      return true;
    }

    m_solver->whichAreUnits(setOfVar, unitsLit); // collect unit literals
    m_specs->preUpdate(unitsLit);

    // compute the connected composant
    std::vector<std::vector<Var>> varConnected;

    int nbComponent = m_specs->computeConnectedComponent(varConnected, setOfVar,
                                                         freeVariable);
    expelNoDecisionVar(freeVariable, m_isDecisionVarible);

    // init the returned result.
    result.count = T(1);
    result.valuation = getArray();
    for (unsigned i = 0; i < m_sizeArray; i++)
      result.valuation[i] = 0;

    // compute the set of projected variable that has became free.
    unsigned nbFreeProj = 0;
    for (auto v : freeVariable)
      if (m_isProjectedVariable[v])
        nbFreeProj++;

    // compute the projected variable distribution.
    std::vector<unsigned> distribution;
    unsigned nbRemainingProjVar = 0;
    if (m_cutActivatedMax) {
      for (int cp = 0; cp < nbComponent; cp++) {
        std::vector<Var> &connected = varConnected[cp];
        int nbProj = 0;
        for (auto v : connected)
          if (m_isProjectedVariable[v])
            nbProj++;
        distribution.push_back(nbProj);
        nbRemainingProjVar += nbProj;

        // update the valuation if needed.
        if (!nbProj)
          for (auto v : connected)
            if (m_isMaxDecisionVariable[v])
              result.valuation[m_redirectionPos[v]] |=
                  (m_solver->getModelVar(v) == l_True) ? 1 : 0;
      }
    }

    // consider each connected component.
    bool complete = true;
    if (nbComponent) {
      m_nbSplit += (nbComponent > 1) ? nbComponent : 0;
      T lowerTarget = m_cutActivatedMax ? lower : 0;
      while (m_cutActivatedMax && nbFreeProj--)
        lowerTarget /= 2;

      for (int cp = 0; cp < nbComponent; cp++) {
        std::vector<Var> &connected = varConnected[cp];

        T currentLowerTarget = T(0);
        if (m_cutActivatedMax) {
          // check if it is useful to consider the current subproblem.
          if (!distribution[cp]) {
            continue;
          }
          nbRemainingProjVar -= distribution[cp];

          // compute the lower bound for the current sub-problem.
          currentLowerTarget = lowerTarget / result.count;
          for (unsigned i = 0; i < nbRemainingProjVar; i++)
            currentLowerTarget /= 2;
        }
        TmpEntry<MaxSharpSatResult> cb = m_cacheMax->searchInCache(connected);

        if (cb.defined) {
          result.count = result.count * cb.getValue().count;

          if (cb.getValue().valuation)
            orOnMaxVar(connected, result.valuation, cb.getValue().valuation);
        } else {
          MaxSharpSatResult tmpResult;
          complete = searchMaxSharpSatDecision(connected, out, tmpResult,
                                               currentLowerTarget);
          if (!complete) {
            m_cacheMax->releaseMemory(cb.getCachedBucket());
            m_countMaxCut++;
            result.count = 0;
            break;
          } else {
            m_cacheMax->addInCache(cb, tmpResult);
            result.count = result.count * tmpResult.count;
            orOnMaxVar(connected, result.valuation, tmpResult.valuation);
          }
        }
      }
    } // else we have a tautology

    for (unsigned i = 0; i < m_sizeArray && complete; i++) {
      Lit l = Lit::makeLit(m_problem->getMaxVar()[i], false);
      if (m_specs->litIsAssigned(l))
        result.valuation[i] = m_specs->litIsAssignedToTrue(l);
    }

    m_specs->postUpdate(unitsLit);
    expelNoDecisionLit(unitsLit, m_isDecisionVarible);
    return complete;
  } // searchMaxValuation

  /**
   * This function select a variable and compile a decision node.
   *
   * @param[in] connected, the set of variable present in the current
   * problem.
   * @param[in] out, the stream we use to print out logs.
   * @param[out] result, the best solution found.
   * @param[in] lower, the min we do not want to get.
   * @param[in] upper, the max we can possible get.
   *
   * \return true if we go until the end of the process, false if we cut
   * before.
   */
  bool searchMaxSharpSatDecision(std::vector<Var> &connected, std::ostream &out,
                                 MaxSharpSatResult &result, T &lower) {
    if (m_cutActivatedMax) {
      T upper = computeUpper(connected);
      if (upper <= lower) {
        result.count = T(0);
        result.valuation = NULL;
        return false;
      }
    }

    // search the next variable to branch on
    Var v =
        m_hVar->selectVariable(connected, *m_specs, m_isMaxDecisionVariable);

    if (v == var_Undef) {

      std::vector<Lit> unitsLit;
      std::vector<Var> freeVar;
      if (!countInd_(connected, unitsLit, freeVar, out, result.count, lower)) {
        m_countIndCut++;
        return false;
      }

      result.count *= m_problem->computeWeightUnitFree<T>(unitsLit, freeVar);
      result.valuation = NULL;

      if (result.count > m_maxCount) {
        std::cout << "a) result.count = " << result.count << "\n";
        m_maxCount = result.count;
      }
      return true;
    }

    Lit l = Lit::makeLit(v, m_hPhase->selectPhase(v));
    m_nbDecisionNode++;

    // consider the two value for l
    DataBranch<T> b[2];
    MaxSharpSatResult res[2];

    // search max#sat for the first phase.
    assert(!m_solver->isInAssumption(l.var()));
    m_solver->pushAssumption(l);
    bool status0 = searchMaxValuation(connected, b[0].unitLits, b[0].freeVars,
                                      out, res[0], lower);
    m_solver->popAssumption();
    b[0].d = res[0].count *
             m_problem->computeWeightUnitFree<T>(b[0].unitLits, b[0].freeVars);

    // search max#sat for the next phase.
    T lowerDecision = (b[0].d > lower) ? b[0].d : lower;
    bool status1 = true;
    if (m_solver->isInAssumption(l))
      res[1].count = T(0);
    else if (m_solver->isInAssumption(~l))
      status1 = searchMaxValuation(connected, b[1].unitLits, b[1].freeVars, out,
                                   res[1], lowerDecision);
    else {
      m_solver->pushAssumption(~l);
      status1 = searchMaxValuation(connected, b[1].unitLits, b[1].freeVars, out,
                                   res[1], lowerDecision);
      m_solver->popAssumption();
    }

    b[1].d = res[1].count *
             m_problem->computeWeightUnitFree<T>(b[1].unitLits, b[1].freeVars);

    if (!status0 && !status1)
      return false;

    // aggregation with max.
    result.count = (b[0].d > b[1].d) ? b[0].d : b[1].d;
    result.valuation = (b[0].d > b[1].d) ? res[0].valuation : res[1].valuation;

    // the call has not been completed.
    if (result.count == 0)
      return false;

    // update the global maxcount if needed.
    if (result.count > m_maxCount) {
      std::cout << "b) result.count = " << result.count << "\n";
      m_maxCount = result.count;
    }

    return true;
  } // searchMaxSharpSatDecision

  /**
   * Count the number of projected models.
   *
   * @param[in] setOfVar, the current set of considered variables
   * @param[in] unitsLit, the set of unit literal detected at this level
   * @param[in] freeVariable, the variables which become free decision node
   * @param[in] out, the stream we use to print out logs.
   * @param[out] result is used to store the result.
   * @param[in] lower is the lowest number of models possibles.
   *
   * \return true if we complete the search, false otherwise.
   */
  bool countInd_(std::vector<Var> &setOfVar, std::vector<Lit> &unitsLit,
                 std::vector<Var> &freeVariable, std::ostream &out, T &result,
                 T &lower) {
    showRun(out);
    m_nbCallProj++;

    if (!m_solver->solve(setOfVar)) {
      result = T(0);
      return true;
    }

    m_solver->whichAreUnits(setOfVar, unitsLit); // collect unit literals
    m_specs->preUpdate(unitsLit);

    // compute the connected composant
    std::vector<std::vector<Var>> varConnected;

    int nbComponent = m_specs->computeConnectedComponent(varConnected, setOfVar,
                                                         freeVariable);
    expelNoDecisionVar(freeVariable, m_isDecisionVarible);

    unsigned nbFreeProj = 0;
    for (auto v : freeVariable)
      if (m_isProjectedVariable[v])
        nbFreeProj++;

    std::vector<unsigned> distribution;
    unsigned nbRemainingProjVar = 0;
    if (m_cutActivatedProj) {
      for (int cp = 0; cp < nbComponent; cp++) {
        std::vector<Var> &connected = varConnected[cp];
        int nbProj = 0;
        for (auto v : connected)
          if (m_isProjectedVariable[v])
            nbProj++;
        distribution.push_back(nbProj);
        nbRemainingProjVar += nbProj;
      }
    }

    // consider each connected component.
    bool complete = true;
    result = T(1);
    if (nbComponent) {
      m_nbSplit += (nbComponent > 1) ? nbComponent : 0;
      T lowerTarget = m_cutActivatedProj ? lower : T(0);

      while (m_cutActivatedProj && nbFreeProj--)
        lowerTarget /= 2;

      for (int cp = 0; cp < nbComponent; cp++) {
        std::vector<Var> &connected = varConnected[cp];
        T currentLowerTarget = T(0);
        if (m_cutActivatedProj) {
          // check if it is useful to consider the current subproblem.
          if (!distribution[cp])
            continue;
          nbRemainingProjVar -= distribution[cp];

          // compute the lower bound for the current sub-problem.
          currentLowerTarget = currentLowerTarget / result;
          for (unsigned i = 0; i < nbRemainingProjVar; i++)
            currentLowerTarget /= 2;
        }

        TmpEntry<T> cb = m_cacheInd->searchInCache(connected);

        if (cb.defined)
          result = result * cb.getValue();
        else {
          T curr;
          complete =
              countIndDecisionNode(connected, out, curr, currentLowerTarget);

          if (complete)
            m_cacheInd->addInCache(cb, curr);
          else {
            m_cacheInd->releaseMemory(cb.getCachedBucket());
            break;
          }
          result = result * curr;
        }
      }
    } // else we have a tautology

    m_specs->postUpdate(unitsLit);
    return complete;
  } // countInd_

  /**
   * This function select a variable and compile a decision node.
   *
   * @param[in] connected, the set of variable present in the current
   * problem.
   * @param[in] out, the stream we use to print out logs.
   * @param[out] result is used to store the result.
   * @param[in] lower is the lowest number of models possibles.
   *
   * \return true if we complete the model counting operation.
   */
  bool countIndDecisionNode(std::vector<Var> &connected, std::ostream &out,
                            T &result, T &lower) {
    // search the next variable to branch on
    Var v = m_hVar->selectVariable(connected, *m_specs, m_isDecisionVarible);

    if (v == var_Undef) {
      result = T(1);
      return true;
    }

    // count the number of projected variables.
    T countProj = 1;
    if (m_cutActivatedProj) {
      for (auto &v : connected)
        if (m_isProjectedVariable[v])
          countProj = countProj * 2;

      // cannot get enough models.
      if (countProj <= lower) {
        result = T(0);
        return false;
      }
    }

    // select a variable for decision.
    Lit l = Lit::makeLit(v, m_hPhase->selectPhase(v));
    m_nbDecisionNode++;

    // consider the two value for l
    DataBranch<T> b[2];

    // compute the next lower.
    T nextLower = m_cutActivatedProj ? lower - (countProj / 2) : T(0);
    if (nextLower < 0)
      nextLower = T(0);

    assert(!m_solver->isInAssumption(l.var()));
    m_solver->pushAssumption(l);
    bool status0 = countInd_(connected, b[0].unitLits, b[0].freeVars, out,
                             b[0].d, nextLower);
    m_solver->popAssumption();

    assert(status0 || m_cutActivatedProj);
    if (m_cutActivatedProj && !status0) {
      result = T(0);
      return false;
    }

    // compute the next lower regarding the already compute information.
    b[0].d *= m_problem->computeWeightUnitFree<T>(b[0].unitLits, b[0].freeVars);
    nextLower = lower - b[0].d;

    bool status1 = true;
    if (m_solver->isInAssumption(l))
      b[1].d = 0;
    else if (m_solver->isInAssumption(~l))
      status1 = countInd_(connected, b[1].unitLits, b[1].freeVars, out, b[1].d,
                          nextLower);
    else {
      m_solver->pushAssumption(~l);
      status1 = countInd_(connected, b[1].unitLits, b[1].freeVars, out, b[1].d,
                          nextLower);
      m_solver->popAssumption();
    }

    assert(status1 || m_cutActivatedProj);
    if (m_cutActivatedProj && !status1) {
      result = T(0);
      return false;
    }

    b[1].d *= m_problem->computeWeightUnitFree<T>(b[1].unitLits, b[1].freeVars);
    result = b[0].d + b[1].d;
    return true;
  } // computeDecisionNode

  /**
   * @brief Search for an interpretation that maximize the number of models in a
   * greedy search.
   *
   * @param setOfVar is the set of variables we are considering.
   * @param out is the stream where is printed out the logs.
   * @param result is the interpretation and the related number of models.
   */
  void greedySearch(std::vector<Var> &setOfVar, std::ostream &out,
                    MaxSharpSatResult &result) {
    // first: search for a model to init the interpretation.
    if (!m_solver->solve(setOfVar)) {
      result.count = T(0);
      result.valuation = NULL;
      return;
    }

    // collect the model.
    std::vector<Lit> model;
    for (auto v : setOfVar)
      if (m_isMaxDecisionVariable[v])
        model.push_back(Lit::makeLit(v, m_solver->getModelVar(v) == l_False));

    // compute the number of projected model.
    m_solver->restart();
    m_solver->setAssumption(model);

    DataBranch<T> b;
    T lower = 0;
    searchMaxValuation(setOfVar, b.unitLits, b.freeVars, out, result, lower);
    result.count *= m_problem->computeWeightUnitFree<T>(b.unitLits, b.freeVars);

    // try to improve.
    bool wasImproved = true;
    while (wasImproved) {
      wasImproved = false;
      for (auto &l : model) {
        l = ~l;
        m_solver->resetAssumption();
        m_solver->setAssumption(model);

        b.unitLits.clear();
        b.freeVars.clear();

        MaxSharpSatResult tres;
        bool complete = searchMaxValuation(setOfVar, b.unitLits, b.freeVars,
                                           out, tres, lower);
        tres.count *=
            m_problem->computeWeightUnitFree<T>(b.unitLits, b.freeVars);

        if (complete && tres.count > result.count) {
          result = tres;
          wasImproved = true;
        } else
          l = ~l;
      }
    }

    m_solver->resetAssumption();
    m_solver->restart();
    std::cout << "c Greedy search done: " << result.count << "\n";
  } // greedySearch

  /**
     Compute U using the trace of a SAT solver.

     @param[in] setOfVar, the set of variables of the considered problem.
     @param[in] out, the stream are is print out the logs.
     @param[in] warmStart, to activate/deactivate the warm start strategy.
     /!\ When the warm start is activated we the assumptions are reset.

     \return an element of type U that sums up the given CNF formula using a
     DPLL style algorithm with an operation manager.
  */
  void compute(std::vector<Var> &setOfVar, std::ostream &out,
               MaxSharpSatResult &result, bool warmStart = true) {
    if (m_problem->isUnsat() || (warmStart && !m_panicMode &&
                                 !m_solver->warmStart(29, 11, setOfVar, m_out)))
      result.count = T(0);

    MaxSharpSatResult greedyResult;
    if (m_greedyInitActivated)
      greedySearch(setOfVar, out, greedyResult);
    else
      greedyResult.count = T(0);

    DataBranch<T> b;
    T lower = greedyResult.count;
    bool complete = searchMaxValuation(setOfVar, b.unitLits, b.freeVars, out,
                                       result, lower);

    if (complete)
      result.count *=
          m_problem->computeWeightUnitFree<T>(b.unitLits, b.freeVars);

    assert(complete || m_greedyInitActivated);
    if (!complete || (greedyResult.count > result.count))
      result = greedyResult;
  } // compute

public:
  /**
   * @brief Search for the instantiation of the variables of
   * m_problem->getMaxVar() that maximize the number of the remaining
   * variables where the variables not belonging to m_problem->getIndVar()
   * are existantially quantified.
   *
   * @param[in] vm, the set of options.
   */
  void run(po::variables_map &vm) {
    std::vector<Var> setOfVar;
    for (int i = 1; i <= m_specs->getNbVariable(); i++)
      setOfVar.push_back(i);

    MaxSharpSatResult result;
    compute(setOfVar, m_out, result);
    printFinalStats(m_out);
    std::cout << "v ";
    for (unsigned i = 0; i < m_problem->getMaxVar().size(); i++)
      std::cout << ((result.valuation[i]) ? "" : "-")
                << m_problem->getMaxVar()[i] << " ";
    std::cout << "0\n";

    std::cout << "s " << result.count << "\n";
  } // run
};
} // namespace d4
